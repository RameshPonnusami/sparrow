package test.com.juno.etl.dsl;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.junit4.AbstractXtextTests;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.parser.IParseResult;
import org.eclipse.xtext.parser.IParser;
import org.eclipse.xtext.resource.IResourceFactory;
import org.eclipse.xtext.util.StringInputStream;
import org.junit.Assert;
import org.junit.Test;

import com.google.inject.Injector;
import com.juno.etl.dsl.junoDslStandaloneSetup;
import com.juno.etl.dsl.junoDslStandaloneSetupGenerated;
import com.juno.etl.dsl.parser.antlr.junoDslParser;
import com.juno.etl.dsl.junodsl.Action;
import com.juno.etl.dsl.junodsl.PigQuery;
import com.juno.etl.dsl.junodsl.PigScript;
import com.juno.etl.dsl.junodsl.Statement;

public class ProcessDefinitionTest extends AbstractXtextTests {

	@Test
	public void testValidateConversiondownload() throws Exception {

		String path = this.getClass().getResource("conversion_download_etlprocess.ydl").getPath();

		String model = readFromFile(path);

		Injector guiceInjector = new junoDslStandaloneSetup()
				.createInjectorAndDoEMFRegistration();
		IParser parser = guiceInjector.getInstance(junoDslParser.class);
		IParseResult result = parser.parse(new StringReader(model));
		EObject eRoot = result.getRootASTElement();
		com.juno.etl.dsl.junodsl.Process root = (com.juno.etl.dsl.junodsl.Process) eRoot;
		Assert.assertEquals("conversion.data.download.process", root.getName());
		List<Action> actionList1 = root.getAction();
		for (Action processAction : actionList1) {
			EObject actionObject = processAction;
			Assert.assertEquals("PigScript", actionObject.eClass().getName());

			if (actionObject instanceof PigScript) {
				PigScript script = (PigScript) actionObject;
				System.out.println(script.getClass().getSimpleName());
				Assert.assertEquals("loadandclean", script.getName());
				// Assert.assertEquals("$condition", script.getIf());
				Assert.assertEquals("$rawlogcluster", script.getOn());
				EList<PigQuery> value = script.getValue();
				PigQuery query = value.get(0);
				List<Statement> pigStatements = query.getElements();
				for (int i = 0; i < pigStatements.size(); i++) {
					System.out.println(pigStatements.get(i));
				}
				/*String[] expectedStatements = new String[] {
						"ad_request = LOAD '$ad_request_payload' USING PigStorage()",
						"ad_request_partial_clean = FOREACH ad_request GENERATE columns_list" };

				int i = 0;
				for (Statement stmt : pigStatements) {
					Assert.assertEquals(expectedStatements[i], NodeModelUtils
							.getNode(stmt).getText().trim());
					i++;
				}*/
			}
		}

		URI uriToUse = URI.createFileURI(path);

		junoDslStandaloneSetupGenerated gen = new junoDslStandaloneSetupGenerated();
		gen.createInjectorAndDoEMFRegistration();

		org.eclipse.xtext.resource.IResourceFactory resourceFactory = (IResourceFactory) Resource.Factory.Registry.INSTANCE
				.getExtensionToFactoryMap().get("ydl");

		Resource resource = resourceFactory.createResource(uriToUse);
		resource.load(this.getAsStream(model), null);

		EList<EObject> metadata = resource.getContents();

		for (EObject eObject : metadata) {
			com.juno.etl.dsl.junodsl.Process process = (com.juno.etl.dsl.junodsl.Process) eObject;
			Assert.assertEquals("conversion.data.download.process",
					process.getName());
			List<Action> actionList = process.getAction();
			for (Action processAction : actionList) {
				EObject actionObject = processAction;
				Assert.assertEquals("PigScript", actionObject.eClass()
						.getName());

				if (actionObject instanceof PigScript) {
					PigScript script = (PigScript) actionObject;
					Assert.assertEquals("loadandclean", script.getName());
					// Assert.assertEquals("$condition", script.getIf());
					Assert.assertEquals("$rawlogcluster", script.getOn());
					EList<PigQuery> value = script.getValue();
					PigQuery query = value.get(0);
					List<Statement> pigStatements = query.getElements();
					for (int i = 0; i < pigStatements.size(); i++) {
						System.out.println(pigStatements.get(i));
					}
					/*String[] expectedStatements = new String[] {
							"ad_request = LOAD '$ad_request_payload' USING PigStorage()",
							"ad_request_partial_clean = FOREACH ad_request GENERATE columns_list" };

					int i = 0;
					for (Statement stmt : pigStatements) {
						Assert.assertEquals(expectedStatements[i],
								NodeModelUtils.getNode(stmt).getText().trim());
						i++;
					}*/
				}
			}
		}
	}

	private String readFromFile(String path) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(path));
		String readerString;
		StringBuilder builder = new StringBuilder();
		while ((readerString = br.readLine()) != null) {
			builder.append(readerString);
		}
		br.close();
		return builder.toString();
	}

	protected URI computeUnusedUri(ResourceSet resourceSet) {
		String name = "__synthetic";
		for (int i = 0; i < Integer.MAX_VALUE; i++) {
			URI syntheticUri = URI.createURI(name + i + ".dpl");
			if (resourceSet.getResource(syntheticUri, false) == null)
				return syntheticUri;
		}

		throw new IllegalStateException();
	}

}
