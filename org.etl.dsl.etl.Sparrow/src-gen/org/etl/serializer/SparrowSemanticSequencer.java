/*
 * generated by Xtext 2.12.0
 */
package org.etl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.etl.services.SparrowGrammarAccess;
import org.etl.sparrow.Callprocess;
import org.etl.sparrow.Catch;
import org.etl.sparrow.Copydata;
import org.etl.sparrow.Fetch;
import org.etl.sparrow.Finally;
import org.etl.sparrow.Googlecal;
import org.etl.sparrow.LoadCsv;
import org.etl.sparrow.Slack;
import org.etl.sparrow.Sms;
import org.etl.sparrow.SparrowPackage;
import org.etl.sparrow.Transform;
import org.etl.sparrow.Try;
import org.etl.sparrow.Updatedaudit;
import org.etl.sparrow.WriteCsv;

@SuppressWarnings("all")
public class SparrowSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SparrowGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SparrowPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SparrowPackage.CALLPROCESS:
				sequence_Callprocess(context, (Callprocess) semanticObject); 
				return; 
			case SparrowPackage.CATCH:
				sequence_Catch(context, (Catch) semanticObject); 
				return; 
			case SparrowPackage.COPYDATA:
				sequence_Copydata(context, (Copydata) semanticObject); 
				return; 
			case SparrowPackage.FETCH:
				sequence_Fetch(context, (Fetch) semanticObject); 
				return; 
			case SparrowPackage.FINALLY:
				sequence_Finally(context, (Finally) semanticObject); 
				return; 
			case SparrowPackage.GOOGLECAL:
				sequence_Googlecal(context, (Googlecal) semanticObject); 
				return; 
			case SparrowPackage.LOAD_CSV:
				sequence_LoadCsv(context, (LoadCsv) semanticObject); 
				return; 
			case SparrowPackage.PROCESS:
				sequence_Process(context, (org.etl.sparrow.Process) semanticObject); 
				return; 
			case SparrowPackage.SLACK:
				sequence_Slack(context, (Slack) semanticObject); 
				return; 
			case SparrowPackage.SMS:
				sequence_Sms(context, (Sms) semanticObject); 
				return; 
			case SparrowPackage.TRANSFORM:
				sequence_Transform(context, (Transform) semanticObject); 
				return; 
			case SparrowPackage.TRY:
				sequence_Try(context, (Try) semanticObject); 
				return; 
			case SparrowPackage.UPDATEDAUDIT:
				sequence_Updatedaudit(context, (Updatedaudit) semanticObject); 
				return; 
			case SparrowPackage.WRITE_CSV:
				sequence_WriteCsv(context, (WriteCsv) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Callprocess
	 *     Callprocess returns Callprocess
	 *
	 * Constraint:
	 *     (name=STRING target=STRING value=SelectStatement condition=STRING)
	 */
	protected void sequence_Callprocess(ISerializationContext context, Callprocess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.CALLPROCESS__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.CALLPROCESS__TARGET));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.CALLPROCESS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.CALLPROCESS__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.CALLPROCESS__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.CALLPROCESS__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCallprocessAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCallprocessAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getCallprocessAccess().getValueSelectStatementParserRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCallprocessAccess().getConditionSTRINGTerminalRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Catch returns Catch
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Catch(ISerializationContext context, Catch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Copydata
	 *     Copydata returns Copydata
	 *
	 * Constraint:
	 *     (name=STRING source=STRING to=STRING value=SelectStatement condition=STRING)
	 */
	protected void sequence_Copydata(ISerializationContext context, Copydata semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.COPYDATA__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.COPYDATA__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.COPYDATA__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.COPYDATA__TO));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.COPYDATA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.COPYDATA__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.COPYDATA__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.COPYDATA__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCopydataAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCopydataAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCopydataAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getCopydataAccess().getValueSelectStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCopydataAccess().getConditionSTRINGTerminalRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Fetch
	 *     Fetch returns Fetch
	 *
	 * Constraint:
	 *     (name=STRING source=STRING value=SelectStatement condition=STRING)
	 */
	protected void sequence_Fetch(ISerializationContext context, Fetch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FETCH__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FETCH__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FETCH__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FETCH__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FETCH__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FETCH__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFetchAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFetchAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getFetchAccess().getValueSelectStatementParserRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFetchAccess().getConditionSTRINGTerminalRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Finally returns Finally
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Finally(ISerializationContext context, Finally semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Googlecal
	 *     Googlecal returns Googlecal
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         calid=STRING 
	 *         authstore=STRING 
	 *         useraccount=STRING 
	 *         title=STRING 
	 *         start=STRING 
	 *         end=STRING 
	 *         notify=STRING 
	 *         value=STRING 
	 *         condition=STRING
	 *     )
	 */
	protected void sequence_Googlecal(ISerializationContext context, Googlecal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__CALID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__CALID));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__AUTHSTORE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__AUTHSTORE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__USERACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__USERACCOUNT));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__TITLE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__START));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__END));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__NOTIFY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__NOTIFY));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGooglecalAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGooglecalAccess().getCalidSTRINGTerminalRuleCall_4_0(), semanticObject.getCalid());
		feeder.accept(grammarAccess.getGooglecalAccess().getAuthstoreSTRINGTerminalRuleCall_6_0(), semanticObject.getAuthstore());
		feeder.accept(grammarAccess.getGooglecalAccess().getUseraccountSTRINGTerminalRuleCall_8_0(), semanticObject.getUseraccount());
		feeder.accept(grammarAccess.getGooglecalAccess().getTitleSTRINGTerminalRuleCall_10_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getGooglecalAccess().getStartSTRINGTerminalRuleCall_12_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getGooglecalAccess().getEndSTRINGTerminalRuleCall_14_0(), semanticObject.getEnd());
		feeder.accept(grammarAccess.getGooglecalAccess().getNotifySTRINGTerminalRuleCall_16_0(), semanticObject.getNotify());
		feeder.accept(grammarAccess.getGooglecalAccess().getValueSTRINGTerminalRuleCall_19_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getGooglecalAccess().getConditionSTRINGTerminalRuleCall_22_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns LoadCsv
	 *     LoadCsv returns LoadCsv
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         delim=STRING 
	 *         value=SelectStatement 
	 *         condition=STRING
	 *     )
	 */
	protected void sequence_LoadCsv(ISerializationContext context, LoadCsv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__TO));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__DELIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__DELIM));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoadCsvAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLoadCsvAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getLoadCsvAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getLoadCsvAccess().getDelimSTRINGTerminalRuleCall_8_0(), semanticObject.getDelim());
		feeder.accept(grammarAccess.getLoadCsvAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getLoadCsvAccess().getConditionSTRINGTerminalRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=STRING try=Try catch=Catch finally=Finally)
	 */
	protected void sequence_Process(ISerializationContext context, org.etl.sparrow.Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.PROCESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.PROCESS__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.PROCESS__TRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.PROCESS__TRY));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.PROCESS__CATCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.PROCESS__CATCH));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.PROCESS__FINALLY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.PROCESS__FINALLY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getProcessAccess().getTryTryParserRuleCall_3_0(), semanticObject.getTry());
		feeder.accept(grammarAccess.getProcessAccess().getCatchCatchParserRuleCall_4_0(), semanticObject.getCatch());
		feeder.accept(grammarAccess.getProcessAccess().getFinallyFinallyParserRuleCall_5_0(), semanticObject.getFinally());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Slack
	 *     Slack returns Slack
	 *
	 * Constraint:
	 *     (name=STRING team=STRING channel=STRING value=STRING condition=STRING)
	 */
	protected void sequence_Slack(ISerializationContext context, Slack semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SLACK__TEAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SLACK__TEAM));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SLACK__CHANNEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SLACK__CHANNEL));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SLACK__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SLACK__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SLACK__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SLACK__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSlackAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSlackAccess().getTeamSTRINGTerminalRuleCall_4_0(), semanticObject.getTeam());
		feeder.accept(grammarAccess.getSlackAccess().getChannelSTRINGTerminalRuleCall_6_0(), semanticObject.getChannel());
		feeder.accept(grammarAccess.getSlackAccess().getValueSTRINGTerminalRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSlackAccess().getConditionSTRINGTerminalRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Sms
	 *     Sms returns Sms
	 *
	 * Constraint:
	 *     (name=STRING target=STRING value=STRING condition=STRING)
	 */
	protected void sequence_Sms(ISerializationContext context, Sms semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SMS__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SMS__TARGET));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SMS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SMS__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SMS__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SMS__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSmsAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSmsAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getSmsAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSmsAccess().getConditionSTRINGTerminalRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Transform
	 *     Transform returns Transform
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=STRING)
	 */
	protected void sequence_Transform(ISerializationContext context, Transform semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Try returns Try
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Try(ISerializationContext context, Try semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Updatedaudit
	 *     Updatedaudit returns Updatedaudit
	 *
	 * Constraint:
	 *     (name=STRING logsink=STRING value=SelectStatement)
	 */
	protected void sequence_Updatedaudit(ISerializationContext context, Updatedaudit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.UPDATEDAUDIT__LOGSINK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.UPDATEDAUDIT__LOGSINK));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.UPDATEDAUDIT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.UPDATEDAUDIT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdatedauditAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getLogsinkSTRINGTerminalRuleCall_4_0(), semanticObject.getLogsink());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getValueSelectStatementParserRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns WriteCsv
	 *     WriteCsv returns WriteCsv
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         delim=STRING 
	 *         value=SelectStatement 
	 *         condition=STRING
	 *     )
	 */
	protected void sequence_WriteCsv(ISerializationContext context, WriteCsv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__TO));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__DELIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__DELIM));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWriteCsvAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWriteCsvAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getWriteCsvAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getWriteCsvAccess().getDelimSTRINGTerminalRuleCall_8_0(), semanticObject.getDelim());
		feeder.accept(grammarAccess.getWriteCsvAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getWriteCsvAccess().getConditionSTRINGTerminalRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
}
